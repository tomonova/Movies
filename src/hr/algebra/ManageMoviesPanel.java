/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Enums.Occupation;
import hr.algebra.model.Genre;
import hr.algebra.model.GenreComboBoxModel;
import hr.algebra.model.Movie;
import hr.algebra.model.Person;
import hr.algebra.model.MovieTableModel;
import hr.algebra.parsers.MovieParser;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.Frame;
import java.awt.Window;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.Year;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.text.JTextComponent;

/**
 *
 * @author TomoNova
 */
public class ManageMoviesPanel extends javax.swing.JPanel  {

    private static final String DIR = "assets";
    private static final String NO_IMAGE = "no_image.png";
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    private Repository repository;
    private MovieTableModel moviesTableModel;
    private GenreComboBoxModel genreCBModel;
    private final DefaultListModel<Person> directorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> actorsModel = new DefaultListModel<>();
    private Movie selectedMovie;

    public ManageMoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbImage = new javax.swing.JLabel();
        lbACtors = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        lbDirectors = new javax.swing.JList<>();
        btnChooseImg = new javax.swing.JButton();
        tfImageUrl = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfPubDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfOrigTitle = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tfDescription = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        cbGenre = new javax.swing.JComboBox<>();
        spRating = new javax.swing.JSpinner();
        lblTitleError = new javax.swing.JLabel();
        lblPubDateError = new javax.swing.JLabel();
        lblOrigTitleError = new javax.swing.JLabel();
        Genre = new javax.swing.JLabel();
        lblLengthError = new javax.swing.JLabel();
        lblDescriptionError = new javax.swing.JLabel();
        liActorsError = new javax.swing.JLabel();
        liDirectorsError = new javax.swing.JLabel();
        lblPosterError = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClearForm = new javax.swing.JButton();
        lblGenreError = new javax.swing.JLabel();
        spLength = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        tfReleaseYear = new javax.swing.JTextField();
        lblReleaseYearError = new javax.swing.JLabel();
        btnManageDirectors = new javax.swing.JButton();
        btnManageActors = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(1210, 850));
        setMinimumSize(new java.awt.Dimension(1210, 850));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lbImage.setMaximumSize(new java.awt.Dimension(278, 400));
        lbImage.setMinimumSize(new java.awt.Dimension(278, 400));
        lbImage.setPreferredSize(new java.awt.Dimension(278, 400));

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbMovies);

        btnChooseImg.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnChooseImg.setText("Choose Image");
        btnChooseImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseImgActionPerformed(evt);
            }
        });

        tfImageUrl.setEditable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DIRECTORS");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 0, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("POSTER");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 0, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("ACTORS");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Title:");

        tfTitle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Publish date (yyyy-mm-dd):");

        tfPubDate.setName("Date"); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Original title:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Genre:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Rating:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Length:");

        tfDescription.setColumns(20);
        tfDescription.setLineWrap(true);
        tfDescription.setRows(5);
        jScrollPane2.setViewportView(tfDescription);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Description:");

        spRating.setModel(new javax.swing.SpinnerNumberModel(0, null, 18, 1));

        lblTitleError.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblTitleError.setForeground(new java.awt.Color(255, 0, 51));

        lblPubDateError.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPubDateError.setForeground(new java.awt.Color(255, 0, 51));

        lblOrigTitleError.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblOrigTitleError.setForeground(new java.awt.Color(255, 0, 51));

        Genre.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Genre.setForeground(new java.awt.Color(255, 0, 51));

        lblLengthError.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblLengthError.setForeground(new java.awt.Color(255, 0, 51));

        lblDescriptionError.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDescriptionError.setForeground(new java.awt.Color(255, 0, 51));

        liActorsError.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        liActorsError.setForeground(new java.awt.Color(255, 0, 51));

        liDirectorsError.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        liDirectorsError.setForeground(new java.awt.Color(255, 0, 51));

        lblPosterError.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPosterError.setForeground(new java.awt.Color(255, 0, 51));

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setText("ADD MOVIE");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 0, 51));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClearForm.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClearForm.setText("Clear Form");
        btnClearForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFormActionPerformed(evt);
            }
        });

        lblGenreError.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblGenreError.setForeground(new java.awt.Color(255, 0, 51));

        spLength.setModel(new javax.swing.SpinnerNumberModel(0, null, 400, 1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Release year:");

        tfReleaseYear.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tfReleaseYear.setName("releaseYear"); // NOI18N

        lblReleaseYearError.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblReleaseYearError.setForeground(new java.awt.Color(255, 0, 51));

        btnManageDirectors.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnManageDirectors.setText("Manage directors");
        btnManageDirectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageDirectorsActionPerformed(evt);
            }
        });

        btnManageActors.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnManageActors.setText("Manage actors");
        btnManageActors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageActorsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTitleError))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPubDateError))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfOrigTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblOrigTitleError))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(74, 74, 74)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(spLength, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblLengthError))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cbGenre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jScrollPane2)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(spRating, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(97, 97, 97)
                                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(14, 14, 14)
                                                .addComponent(tfReleaseYear, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Genre)
                                    .addComponent(lblDescriptionError)
                                    .addComponent(lblGenreError)
                                    .addComponent(lblReleaseYearError))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnManageActors)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnManageDirectors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lbACtors, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbDirectors, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(liActorsError)
                                    .addComponent(liDirectorsError))
                                .addGap(19, 19, 19)))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfImageUrl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPosterError)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnClearForm, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addComponent(btnChooseImg)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitleError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPubDateError))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfOrigTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOrigTitleError))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cbGenre)
                                        .addComponent(lblGenreError)))
                                .addComponent(Genre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblReleaseYearError)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(spRating, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tfReleaseYear))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLengthError)
                                    .addComponent(spLength, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbACtors, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(liActorsError)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDescriptionError))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(liDirectorsError))))
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14))
                    .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(tfImageUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnChooseImg, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPosterError))
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnClearForm, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnManageDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnManageActors, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void btnChooseImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseImgActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfImageUrl.setText(file.getAbsolutePath());
        setIcon(lbImage, file);
    }//GEN-LAST:event_btnChooseImgActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete article",
                "Do you really want to delete article?") == JOptionPane.YES_OPTION) {
            try {
                if (selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                }
                repository.deleteMovie(selectedMovie.getIdMovie());
                moviesTableModel.setMovies(repository.selectMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(ManageMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete article! \n" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Yeah right", "chose a movie for updateing");
            return;
        }
        if (formValid()) {
            try {
                if (!tfImageUrl.getText().trim().equals(selectedMovie.getPicturePath())) {
                    if (selectedMovie.getPicturePath() != null) {
                        Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                    }
                    String localPicturePath = uploadPicture();
                    selectedMovie.setPicturePath(localPicturePath);
                }

                selectedMovie.setTitle(tfTitle.getText().trim());
                selectedMovie.setPubDate(LocalDate.parse(tfPubDate.getText().trim(), Movie.DATE_FORMATTER));
                selectedMovie.setDescription(tfDescription.getText().trim());
                selectedMovie.setReleaseYear(Integer.parseInt(tfReleaseYear.getText().trim()));
                selectedMovie.setGlumci(GetGlumci());
                selectedMovie.setRedatelj(GetRedatelji());
                selectedMovie.setGenre((Genre) cbGenre.getSelectedItem());
                selectedMovie.setRating((Integer) spRating.getValue());
                selectedMovie.setLength((Integer) spLength.getValue());

                repository.updateArticle(selectedMovie);
                moviesTableModel.setMovies(repository.selectMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(ManageMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update article!");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid()) {
            try {
                String localPicturePath = uploadPicture();
                Movie movie = new Movie(
                        tfTitle.getText().trim(),
                        LocalDate.parse(tfPubDate.getText().trim(), Movie.DATE_FORMATTER),
                        Integer.parseInt(tfReleaseYear.getText().trim()),
                        tfDescription.getText().trim(),
                        tfOrigTitle.getText().trim(),
                        localPicturePath,
                        GetRedatelji(),
                        GetGlumci(),
                        (Genre) cbGenre.getSelectedItem(),
                        (Integer) spRating.getValue(),
                        (Integer) spLength.getValue()
                );
                repository.createMovie(movie);
                moviesTableModel.setMovies(repository.selectMovies());
                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(ManageMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to create article!" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnClearFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFormActionPerformed
        clearForm();
        btnAdd.setEnabled(true);
    }//GEN-LAST:event_btnClearFormActionPerformed

    private void btnManageActorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageActorsActionPerformed

        Window parentWindow = SwingUtilities.windowForComponent(this);
        Frame parentFrame = null;
        if (parentWindow instanceof Frame) {
            parentFrame = (Frame) parentWindow;
        }
        PersonManagementDialog pmd = new PersonManagementDialog(parentFrame, true, selectedMovie, Occupation.GLUMAC);
        pmd.addWindowListener(new WindowAdapter() {
            public void windowClosed(WindowEvent e) {
                fillForm(selectedMovie);
            }
        });
        pmd.setVisible(true);
    }//GEN-LAST:event_btnManageActorsActionPerformed

    private void btnManageDirectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageDirectorsActionPerformed
        Window parentWindow = SwingUtilities.windowForComponent(this);
        Frame parentFrame = null;
        if (parentWindow instanceof Frame) {
            parentFrame = (Frame) parentWindow;
        }
        PersonManagementDialog pmd = new PersonManagementDialog(parentFrame, true, selectedMovie, Occupation.REDATELJ);
        pmd.addWindowListener(new WindowAdapter() {
            public void windowClosed(WindowEvent e) {
                fillForm(selectedMovie);
            }
        });
        pmd.setVisible(true);
    }//GEN-LAST:event_btnManageDirectorsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Genre;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChooseImg;
    private javax.swing.JButton btnClearForm;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnManageActors;
    private javax.swing.JButton btnManageDirectors;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbGenre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Person> lbACtors;
    private javax.swing.JList<Person> lbDirectors;
    private javax.swing.JLabel lbImage;
    private javax.swing.JLabel lblDescriptionError;
    private javax.swing.JLabel lblGenreError;
    private javax.swing.JLabel lblLengthError;
    private javax.swing.JLabel lblOrigTitleError;
    private javax.swing.JLabel lblPosterError;
    private javax.swing.JLabel lblPubDateError;
    private javax.swing.JLabel lblReleaseYearError;
    private javax.swing.JLabel lblTitleError;
    private javax.swing.JLabel liActorsError;
    private javax.swing.JLabel liDirectorsError;
    private javax.swing.JSpinner spLength;
    private javax.swing.JSpinner spRating;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextArea tfDescription;
    private javax.swing.JTextField tfImageUrl;
    private javax.swing.JTextField tfOrigTitle;
    private javax.swing.JTextField tfPubDate;
    private javax.swing.JTextField tfReleaseYear;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            initRepository();
            setDefaultPicture();
            initComboBox();
            initTable();
            initListBox();
        } catch (Exception ex) {
            Logger.getLogger(ManageMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("ERROR", "Initialization of Manage Movies panel failed! \n" + ex.getMessage());
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfPubDate, tfOrigTitle, tfDescription, tfImageUrl, tfReleaseYear);
        errorLabels = Arrays.asList(lblTitleError, lblPubDateError, lblOrigTitleError, lblDescriptionError, lblPosterError, lblReleaseYearError);
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        moviesTableModel = new MovieTableModel(repository.selectMovies());
        tbMovies.setModel(moviesTableModel);
        tbMovies.getColumnModel().getColumn(0).setMaxWidth(42);
        tbMovies.getColumnModel().getColumn(2).setMaxWidth(110);
        tbMovies.getColumnModel().getColumn(2).setMinWidth(110);
        tbMovies.getColumnModel().getColumn(5).setMaxWidth(60);
        tbMovies.getColumnModel().getColumn(6).setMaxWidth(60);
    }

    private void setDefaultPicture() {
        File file = new File(DIR + "\\" + NO_IMAGE);
        setIcon(lbImage, file);
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(MovieParser.class
                    .getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon! \n" + ex.getMessage());
        }
    }

    private void clearForm() {
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));
        spRating.setValue(0);
        spLength.setValue(0);
        setDefaultPicture();
        selectedMovie = null;
        cbGenre.setSelectedIndex(0);
        cbGenre.repaint();
        directorsModel.clear();
        actorsModel.clear();
        lblGenreError.setText("");
        liActorsError.setText("");
        liDirectorsError.setText("");
        lblLengthError.setText("");
    }

    private String uploadPicture() throws IOException {
        String picturePath = tfImageUrl.getText().trim();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }

    public void showMovie() {
        clearForm();
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) moviesTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optMovie = repository.getMovie(selectedMovieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
                btnAdd.setEnabled(false);
            }
        } catch (Exception ex) {
            Logger.getLogger(ManageMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show article! \n" + ex.getMessage());
        }
    }

    private void fillForm(Movie movie) {
        if (movie.getPicturePath() != null && Files.exists(Paths.get(movie.getPicturePath()))) {
            tfImageUrl.setText(movie.getPicturePath());
            setIcon(lbImage, new File(movie.getPicturePath()));
        }
        tfTitle.setText(movie.getTitle());
        tfDescription.setText(movie.getDescription());
        tfPubDate.setText(movie.getPubDate().format(Movie.DATE_FORMATTER));
        tfOrigTitle.setText(movie.getOriginalTitle());
        cbGenre.setSelectedItem(movie.getGenre());
        cbGenre.repaint();
        spRating.setValue(movie.getRating());
        spLength.setValue(movie.getLength());
        tfReleaseYear.setText(String.valueOf(movie.getReleaseYear()));
        tfImageUrl.setText(movie.getPicturePath());
        loadDirectorsModel(movie);
        loadActorsModel(movie);
        if (movie.getPicturePath() != null && Files.exists(Paths.get(movie.getPicturePath()))) {
            tfImageUrl.setText(movie.getPicturePath());
            setIcon(lbImage, new File(movie.getPicturePath()));
        }
    }

    private void initComboBox() {
        try {
            genreCBModel = new GenreComboBoxModel(repository.getGenres());
            cbGenre.setModel(genreCBModel);
        } catch (Exception ex) {
            Logger.getLogger(ManageMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("ERROR", "Combobox init error!!" + "\n" + ex.getMessage());
        }
    }

    private void loadDirectorsModel(Movie movie) {
        directorsModel.clear();
        movie.getRedatelj().forEach(directorsModel::addElement);
        lbDirectors.setModel(directorsModel);
    }

    private void loadActorsModel(Movie movie) {
        actorsModel.clear();
        movie.getGlumci().forEach(actorsModel::addElement);
        lbACtors.setModel(actorsModel);
    }

    private void initListBox() {
        lbACtors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lbDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private boolean formValid() {
        boolean ok = true;
        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");

            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDate.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }
            if ("releaseYear".equals(validationFields.get(i).getName())) {
                try {
                    Year year = Year.parse(validationFields.get(i).getText().trim());
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }
        }
        if ((Integer) spLength.getValue() == 0) {
            lblLengthError.setText("X");
            ok = false;
        } else {
            lblLengthError.setText("");
        }
        if (lbACtors.getModel().getSize() == 0) {
            liActorsError.setText("X");
            ok = false;
        } else {
            liActorsError.setText("");
        }
        if (lbDirectors.getModel().getSize() == 0) {
            liDirectorsError.setText("X");
            ok = false;
        } else {
            liDirectorsError.setText("");
        }
        if (cbGenre.getSelectedIndex() == 0) {
            lblGenreError.setText("X");
            ok = false;
        } else {
            lblGenreError.setText("");
        }
        return ok;
    }

    private List<Person> GetGlumci() {
        List<Person> actors = new ArrayList<>();
        for (int i = 0; i < lbACtors.getModel().getSize(); i++) {
            Person person = lbACtors.getModel().getElementAt(i);
            actors.add(person);
        }
        return actors;
    }

    private List<Person> GetRedatelji() {
        List<Person> directors = new ArrayList<>();
        for (int i = 0; i < lbDirectors.getModel().getSize(); i++) {
            Person person = lbDirectors.getModel().getElementAt(i);
            directors.add(person);
        }
        return directors;
    }
}
